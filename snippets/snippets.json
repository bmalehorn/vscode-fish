{
  "shebang": {
    "prefix": "shebang",
    "description": "shebang",
    "body": "#!/usr/bin/env fish"
  },
  "shebang-with-arguments": {
    "prefix": "shebang-with-arguments",
    "description": "shebang with arguments",
    "body": "#!/usr/bin/env ${1|-S,--split-string|} fish ${2|argument ...|}"
  },
  "and": {
    "prefix": "and",
    "description": "and operator",
    "body": "${1:first-expression}${2|; and, &&|} ${3:second-expression}"
  },
  "or": {
    "prefix": "or",
    "description": "or operator",
    "body": "${1:first-expression}${2|; or, \\|\\||} ${3:second-expression}"
  },
  "if": {
    "prefix": "if",
    "description": "if operator",
    "body": ["if ${1:condition}", "\t${2:command ...}", "end"]
  },
  "if-else": {
    "prefix": "if-else",
    "description": "if-else operator",
    "body": [
      "if ${1:condition}",
      "\t${2:command ...}",
      "else",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-less": {
    "prefix": "if-less",
    "description": "if with number comparison ([l]ess [t]han])",
    "body": [
      "if test \"${1:first-expression}\" -lt \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-greater": {
    "prefix": "if-greater",
    "description": "if with number comparison ([g]reater [t]han])",
    "body": [
      "if test \"${1:first-expression}\" -gt \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-less-or-equal": {
    "prefix": "if-less-or-equal",
    "description": "if with number comparison ([l]ess or [e]qual to)",
    "body": [
      "if test \"${1:first-expression}\" -le \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-greater-or-equal": {
    "prefix": "if-greater-or-equal",
    "description": "if with number comparison ([g]reater or [e]qual to)",
    "body": [
      "if test \"${1:first-expression}\" -ge \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-equal": {
    "prefix": "if-equal",
    "description": "if with number comparison ([eq]ual to)",
    "body": [
      "if test \"${1:first-expression}\" -eq \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-not-equal": {
    "prefix": "if-not-equal",
    "description": "if with number comparison ([n]ot [e]qual to)",
    "body": [
      "if test \"${1:first-expression}\" -ne \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-string-equal": {
    "prefix": "if-string-equal",
    "description": "if with string comparison",
    "body": [
      "if test \"${1:first-expression}\" = \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-string-not-equal": {
    "prefix": "if-string-not-equal",
    "description": "if with string comparison",
    "body": [
      "if test \"${1:first-expression}\" != \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-string-empty": {
    "prefix": "if-string-empty",
    "description": "if with string comparison (has [z]ero length)",
    "body": ["if test -z \"${1:expression}\"", "\t${2:command ...}", "end"]
  },
  "if-string-not-empty": {
    "prefix": "if-string-not-empty",
    "description": "if with string comparison ([n]ot empty)",
    "body": ["if test -n \"${1:expression}\"", "\t${2:command ...}", "end"]
  },
  "if-defined": {
    "prefix": "if-defined",
    "description": "if with variable existence check",
    "body": [
      "if set ${1|-q,--query|} \"${2:variable}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "if-not-defined": {
    "prefix": "if-not-defined",
    "description": "if with variable existence check",
    "body": [
      "if not set ${1|-q,--query|} \"${2:variable}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "while operator",
    "body": ["while ${1:condition}", "\t${2:command ...}", "end"]
  },
  "while-less": {
    "prefix": "while-less",
    "description": "while with number comparison ([l]ess [t]han])",
    "body": [
      "while test \"${1:first-expression}\" -lt \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-greater": {
    "prefix": "while-greater",
    "description": "while with number comparison ([g]reater [t]han])",
    "body": [
      "while test \"${1:first-expression}\" -gt \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-less-or-equal": {
    "prefix": "while-less-or-equal",
    "description": "while with number comparison ([l]ess or [e]qual to)",
    "body": [
      "while test \"${1:first-expression}\" -le \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-greater-or-equal": {
    "prefix": "while-greater-or-equal",
    "description": "while with number comparison ([g]reater or [e]qual to)",
    "body": [
      "while test \"${1:first-expression}\" -ge \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-equal": {
    "prefix": "while-equal",
    "description": "while with number comparison ([eq]ual to)",
    "body": [
      "while test \"${1:first-expression}\" -eq \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-not-equal": {
    "prefix": "while-not-equal",
    "description": "while with number comparison ([n]ot [e]qual to)",
    "body": [
      "while test \"${1:first-expression}\" -ne \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-string-equal": {
    "prefix": "while-string-equal",
    "description": "while with string comparison",
    "body": [
      "while test \"${1:first-expression}\" = \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-string-not-equal": {
    "prefix": "while-string-not-equal",
    "description": "while with string comparison",
    "body": [
      "while test \"${1:first-expression}\" != \"${2:second-expression}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-string-empty": {
    "prefix": "while-string-empty",
    "description": "while with string comparison (has [z]ero length)",
    "body": ["while test -z \"${1:expression}\"", "\t${2:command ...}", "end"]
  },
  "while-string-not-empty": {
    "prefix": "while-string-not-empty",
    "description": "while with string comparison ([n]ot empty)",
    "body": ["while test -n \"${1:expression}\"", "\t${2:command ...}", "end"]
  },
  "while-defined": {
    "prefix": "while-defined",
    "description": "while with variable existence check",
    "body": [
      "while set ${1|-q,--query|} \"${2:variable}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "while-not-defined": {
    "prefix": "while-not-defined",
    "description": "while with variable existence check",
    "body": [
      "while not set ${1|-q,--query|} \"${2:variable}\"",
      "\t${3:command ...}",
      "end"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "for operator",
    "body": ["for ${1:item} in ${2:expression}", "\t${3:command ...}", "end"]
  },
  "for-range": {
    "prefix": "for-range",
    "description": "for with range",
    "body": [
      "for ${1:item} in $(seq ${2:from} ${3:to})",
      "\t${4:command ...}",
      "end"
    ]
  },
  "for-stepped-range": {
    "prefix": "for-stepped-range",
    "description": "for with stepped range",
    "body": [
      "for ${1:item} in $(seq ${2:from} ${3:step} ${4:to})",
      "\t${5:command ...}",
      "end"
    ]
  },
  "for-files": {
    "prefix": "for-files",
    "description": "for with files",
    "body": ["for ${1:item} in *.${3:extension}", "\t${4:command ...}", "end"]
  },
  "switch": {
    "prefix": "switch",
    "description": "switch operator",
    "body": [
      "switch \"${1:expression}\"",
      "\tcase ${2:pattern}",
      "\t\t${3:command ...}",
      "\tcase '*'",
      "\t\t${4:command ...}",
      "end"
    ]
  },
  "function": {
    "prefix": "function",
    "description": "function definition",
    "body": ["function ${1:name}", "\t${2:command ...}", "end"]
  },
  "function-described": {
    "prefix": "function-described",
    "description": "function with [d]escription",
    "body": [
      "function ${1:name} ${2|-d,--description|} ${3:explanation}",
      "\t${4:command ...}",
      "end"
    ]
  },
  "function-with-arguments": {
    "prefix": "function-with-arguments",
    "description": "function with [a]rguments",
    "body": [
      "function ${1:name} ${2|-a,--argument-names|} ${3:argument ...}",
      "\t${4:command ...}",
      "end"
    ]
  },
  "function-described-with-arguments": {
    "prefix": "function-described-with-arguments",
    "description": "function with [d]escription and [a]rguments",
    "body": [
      "function ${1:name} ${2|-d,--description|} ${3:explanation} ${4|-a,--argument-names|} ${5:argument ...}",
      "\t${6:command ...}",
      "end"
    ]
  },
  "begin": {
    "prefix": "begin",
    "description": "block",
    "body": ["begin", "    ${1:command ...}", "end"]
  },
  "begin-redirected": {
    "prefix": "begin-redirected",
    "description": "block redirected",
    "body": ["begin", "    ${1:command ...}", "end > ${2:file}"]
  },
  "begin-stderr-redirected": {
    "prefix": "begin-stderr-redirected",
    "description": "block redirected",
    "body": ["begin", "    ${1:command ...}", "end 2> ${2:file}"]
  },
  "set": {
    "prefix": "set",
    "description": "variable definition",
    "body": "set ${1:variable} ${2:value}"
  },
  "set-index": {
    "prefix": "set-index",
    "description": "variable item modification at index",
    "body": "set ${1:variable}[${2:index}] ${3:value}"
  },
  "set-append": {
    "prefix": "set-append",
    "description": "variable item modification at index ([a]ppend)",
    "body": "set ${1|-a,--append|} ${2:variable} ${3:value}"
  },
  "set-prepend": {
    "prefix": "set-prepend",
    "description": "variable item modification at index ([p]repend)",
    "body": "set ${1|-p,--prepend|} ${2:variable} ${3:value}"
  },
  "string": {
    "prefix": "string",
    "description": "string builtin",
    "body": "string ${1|collect,escape,join,join0,length,lower,match,pad,repeat,replace,split,split0,sub,trim,unescape,upper|} -- ${2:argument ...}"
  },
  "string-match": {
    "prefix": "string-match",
    "description": "string filtering",
    "body": "string match -- '${1:pattern}' ${2:argument ...}"
  },
  "string-match-all": {
    "prefix": "string-match-all",
    "description": "string filtering ([a]ll)",
    "body": "string match ${1|-a,--all|} -- '${2:pattern}' ${3:argument ...}"
  },
  "string-not-match": {
    "prefix": "string-not-match",
    "description": "string filtering (in[v]ert)",
    "body": "string match ${1|-v,--invert|} -- '${2:pattern}' ${3:argument ...}"
  },
  "string-regex-match": {
    "prefix": "string-regex-match",
    "description": "string filtering with [r]egex",
    "body": "string match ${1|-r,--regex|} -- '${2:pattern}' ${3:argument ...}"
  },
  "string-regex-match-all": {
    "prefix": "string-regex-match-all",
    "description": "string filtering with [r]egex ([a]ll)",
    "body": "string match ${1|-a,--all|} ${2|-r,--regex|} -- '${3:pattern}' ${4:argument ...}"
  },
  "string-not-regex-match": {
    "prefix": "string-not-regex-match",
    "description": "string filtering with [r]egex (in[v]ert)",
    "body": "string match ${1|-v,--invert|} ${2|-r,--regex|} -- '${3:pattern}' ${4:argument ...}"
  },
  "string-replace": {
    "prefix": "string-replace",
    "description": "string replacement",
    "body": "string replace -- '${1:pattern}' '${2:replacement}' ${2:argument ...}"
  },
  "string-regex-replace": {
    "prefix": "string-regex-replace",
    "description": "string replacement with [r]egex",
    "body": "string replace ${1|-r,--regex|} -- '${2:pattern}' '${3:replacement}' ${4:argument ...}"
  },
  "string-regex-replace-all": {
    "prefix": "string-regex-replace-all",
    "description": "string replacement with [r]egex ([a]ll)",
    "body": "string replace ${1|-a,--all|} ${2|-r,--regex|} -- '${3:pattern}' '${4:replacement}' ${5:argument ...}"
  },
  "less": {
    "prefix": "less",
    "description": "number comparison ([l]ess [t]han])",
    "body": "test \"${1:first-expression}\" -lt \"${2:second-expression}\""
  },
  "greater": {
    "prefix": "greater",
    "description": "number comparison ([g]reater [t]han])",
    "body": "test \"${1:first-expression}\" -gt \"${2:second-expression}\""
  },
  "less-or-equal": {
    "prefix": "less-or-equal",
    "description": "number comparison ([l]ess or [e]qual to)",
    "body": "test \"${1:first-expression}\" -le \"${2:second-expression}\""
  },
  "greater-or-equal": {
    "prefix": "greater-or-equal",
    "description": "number comparison ([g]reater or [e]qual to)",
    "body": "test \"${1:first-expression}\" -ge \"${2:second-expression}\""
  },
  "equal": {
    "prefix": "equal",
    "description": "number comparison ([eq]ual to)",
    "body": "test \"${1:first-expression}\" -eq \"${2:second-expression}\""
  },
  "not-equal": {
    "prefix": "not-equal",
    "description": "number comparison ([n]ot [e]qual to)",
    "body": "test \"${1:first-expression}\" -ne \"${2:second-expression}\""
  },
  "string-equal": {
    "prefix": "string-equal",
    "description": "string comparison",
    "body": "test \"${1:first-expression}\" = \"${2:second-expression}\""
  },
  "string-not-equal": {
    "prefix": "string-not-equal",
    "description": "string comparison",
    "body": "test \"${1:first-expression}\" != \"${2:second-expression}\""
  },
  "string-empty": {
    "prefix": "string-empty",
    "description": "string comparison (has [z]ero length)",
    "body": "test -z \"${1:expression}\""
  },
  "string-not-empty": {
    "prefix": "string-not-empty",
    "description": "string comparison ([n]ot empty)",
    "body": "test -n \"${1:expression}\""
  },
  "defined": {
    "prefix": "defined",
    "description": "variable existence check",
    "body": "set ${1|-q,--query|} \"${2:variable}\""
  },
  "not-defined": {
    "prefix": "not-defined",
    "description": "variable existence check",
    "body": "not set ${1|-q,--query|} \"${2:variable}\""
  },
  "parse": {
    "prefix": "parse",
    "description": "option parsing",
    "body": [
      "argparse ${1|-n,--name|} ${2:name} 'h/help' 'v/version' ${3:option ...} -- \\$argv${4|; or, \\|\\||} return",
      "",
      "if set ${5|-q,--query|} _flag_help",
      "\t${6:command ...}",
      "\treturn 0",
      "end",
      "if set $5 _flag_version",
      "\t${7:command ...}",
      "\treturn 0",
      "end"
    ]
  },
  "parse-with-functions": {
    "prefix": "parse-with-functions",
    "description": "option parsing",
    "body": [
      "function help",
      "\techo 'Usage: ${6:explanation}",
      "",
      "Options:",
      "\t--help|-h  Print help.",
      "\t--version|-v  Print version.",
      "\t${7:option ...}'",
      "end",
      "",
      "function version",
      "\techo '${8:major}.${9:minor}.${10:patch}'",
      "end",
      "",
      "argparse ${1|-n,--name|} ${2:name} 'h/help' 'v/version' ${3:option ...} -- \\$argv${4|; or, \\|\\||} exit",
      "",
      "if set ${5|-q,--query|} _flag_help",
      "\thelp",
      "\texit 0",
      "end",
      "if set $5 _flag_version",
      "\tversion",
      "\texit 0",
      "end"
    ]
  },
  "complete": {
    "prefix": "complete",
    "description": "complete option",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-d,--description|} '${6:explanation}'"
  },
  "complete-required": {
    "prefix": "complete-required",
    "description": "complete option with [r]equired value",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-r,--require-parameter|} ${6|-d,--description|} '${7:explanation}'"
  },
  "complete-with-arguments": {
    "prefix": "complete-with-arguments",
    "description": "complete option with [a]rguments",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-a,--arguments|} '${6:list}' ${7|-d,--description|} '${8:explanation}'"
  },
  "complete-required-with-arguments": {
    "prefix": "complete-required-with-arguments",
    "description": "complete option with [r]equired value and [a]rguments",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-a,--arguments|} '${6:list}' ${7|-r,--require-parameter|} ${8|-d,--description|} '${9:explanation}'"
  },
  "complete-if": {
    "prefix": "complete-if",
    "description": "complete option if",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-n,--condition|} '${6:expression}' ${7|-d,--description|} '${8:explanation}'"
  },
  "complete-required-if": {
    "prefix": "complete-required-if",
    "description": "complete option with [r]equired value if",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-r,--require-parameter|} ${6|-n,--condition|} '${7:expression}' ${8|-d,--description|} '${9:explanation}'"
  },
  "complete-with-arguments-if": {
    "prefix": "complete-with-arguments-if",
    "description": "complete option with [a]rguments if",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-a,--arguments|} '${6:list}' ${7|-n,--condition|} '${8:expression}' ${9|-d,--description|} '${10:explanation}'"
  },
  "complete-required-with-arguments-if": {
    "prefix": "complete-required-with-arguments-if",
    "description": "complete option with [r]equired value and [a]rguments if",
    "body": "complete ${1|-c,--command|} ${2:executable} ${3|-s,-l,-o,--short-option,--long-option,--old-option|} ${4:option} ${5|-a,--arguments|} '${6:list}' ${7|-r,--require-parameter|} ${8|-n,--condition|} '${9:expression}' ${10|-d,--description|} '${11:explanation}'"
  },
  "complete-help": {
    "prefix": "complete-help",
    "description": "complete -h/--help and -v/--version",
    "body": [
      "complete ${1|-c,--command|} ${2:executable} ${3|-s,--short-option|} h ${4|-l,-o,--long-option,--old-option|} help ${5|-d,--description|} 'Show help'",
      "complete $1 $2 $3 v $4 version $5 'Show version'"
    ]
  },
  "skip-first": {
    "prefix": "skip-first",
    "description": "skip first li[n]es or [b]ytes",
    "body": "tail ${1|-n,-c,--lines,--bytes|} +${2:count}"
  },
  "skip-last": {
    "prefix": "skip-last",
    "description": "skip last li[n]es or [b]ytes",
    "body": "head ${1|-n,-c,--lines,--bytes|} -${2:count}"
  },
  "take-first": {
    "prefix": "take-first",
    "description": "take first li[n]es or [b]ytes",
    "body": "head ${1|-n,-c,--lines,--bytes|} ${2:count}"
  },
  "take-last": {
    "prefix": "take-last",
    "description": "take last li[n]es or [b]ytes",
    "body": "tail ${1|-n,-c,--lines,--bytes|} ${2:count}"
  },
  "take-range": {
    "prefix": "take-range",
    "description": "take line range",
    "body": "sed ${1|-n,--quiet|} '${2:from},${3:to}p'"
  },
  "take-stepped-range": {
    "prefix": "take-stepped-range",
    "description": "take each n-th line in range",
    "body": "sed ${1|-n,--quiet|} '${2:from},${3:to}p' | sed $1 '1~${4:step}p'"
  },
  "comment": {
    "prefix": "comment",
    "description": "comment definition",
    "body": "# ${1:description}"
  }
}
